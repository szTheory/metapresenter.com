.container
  .row
    .col
      .container-fluid.text-center
        / .row
        /   .col
        /     %h1 #{dato.application.name}
        .row.justify-content-center
          / .col-4.col-lg-3
          #animated-text-container.col.mb-2
            %p
              %span Ruby
              %span Rails
            %p
              %span Rails
              %span Presenter
            %p
              %span Presenter
              %span Classes
        .row.justify-content-center.mt-4
          .col.col-lg-8
            = image_tag 'images/hero-title.png', class: 'img-fluid mb-3', id: 'hero-title'
            %h3.mb-3 It's time to beautify your Rails views
            %p
              MetaPresenter is a
              %strong 100% free
              Ruby gem that gives you access to the powerful presenter pattern in your Rails views.
            %p.non-mobile
              Pull yourself out of the vortex of messy Rails. Start writing beautiful frontend code that will streamline your work and &ldquo;wow&rdquo; coworkers.

        .row.justify-content-center
          .col.col-lg-4
            #install-instructions.text-left
              %p.text-center To install just add to your Gemfile and bundle:
              = code('ruby') do
                gem 'meta_presenter' 
              = code('sh') do
                $ bundle install
        .row.justify-content-center
          .col.col-lg-4
            %p.upcase.learnmore Learn More
            = image_tag 'images/hero-line-base.png', id: 'hero-line-base'

.container-light.container-fluid
  .row
    .col
      .container-fluid.text-center
        .row.justify-content-center
          .col.col-lg-8
            %h2.shadow-base.elegantshadow.upcase MetaPresenter
            %h3.mt-4 How does it work?
            %p.big
              For each controller & action you get a presenter class with methods that you can call in your views with
              / %code presenter.method_name
              %strong presenter.method_name
            %p.big You can even delegate methods to objects or controller itself to reduce boilerplate.

#black-breakup{style: background_image('images/black-breakup-slash.png', 'images/escher-gradient.png')}
  .container-fluid
    .row
      .col
        .container-fluid.text-center
          .row.justify-content-center
            = image_tag 'images/red-three-dots.png', id: 'red-three-dots'
            %p.big-dark Decompose your helper logic into tight, easily-testable classes
            %p.massive In 4 simple steps
  = image_tag 'images/overlay-shape.png', id: 'black-breakup-image', class: 'img-fluid'

.container-light.container-fluid
  .row
    .col
      %ul.container-fluid
        - dato.home.steps.each do |step|
          = partial 'selling_point', locals: {message: step.message, code_block: step.code, syntax_language: step.syntax_language}
        
      .container-fluid.text-center
        .row
          .col
            = link_to '/readme', class: 'btn btn-primary' do
              #{dato.home.start_button}
